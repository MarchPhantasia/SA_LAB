#Nginx的全局配置，也就是main,包含Events和HTTP

#指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行(windows会有警告信息)
#user nobody nobody;
#指定了Nginx要开启的进程数,每个Nginx进程平均耗费10M~12M内存
worker_processes 20;
#定义全局错误日志文件,一定要设置warn级别以上，日志输出级别有:[debug|info|notice|warn|error|crit]
error_log logs/error.log notice;
#指定进程pid的存储文件位置
pid logs/nginx.pid;
#Nginxworker最大打开文件数
worker_rlimit_nofile 65535;

#events事件指令是设定Nginx的工作模式及连接数上限
events{
	#指定Nginx的工作模式，Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll
	#use epoll;
	#单个进程最大连接数（最大连接数=连接数*进程数）
	worker_connections 4000;
}


#设定http服务器
http{
	#实现对配置文件所包含的文件的设定
	include mime.types;
	#默认文件类型:二进制流
	default_type application/octet-stream;
	#服务域名的最大hash表大小
	server_names_hash_max_size 512;     
	#服务域名的hash表大小
	server_names_hash_bucket_size 128;
	#指定Nginx日志的输出格式
	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
	    '$status $body_bytes_sent  $request_body "$http_referer" '
	    '"$http_user_agent" "$http_x_forwarded_for"'
	    '"responsetime":$request_time'
	    '-"$upstream_cache_status"'
		' Alian $http_[W-Os] $http_[W-Brand] $http_[W-Model] $http_[W-IMEI] $http_[W-App-Version] $http_[W-Token] $http_[W-Partner-Id] $http_[W-Operator-Id] $http_[W-Window-Id]';

	log_format logstash '{"@timestamp":"$time_iso8601",'
		'"slbip":"$remote_addr",'
		'"clientip":"$http_x_forwarded_for",'
		'"serverip":"$server_addr",'
		'"size":$body_bytes_sent,'
		'"responsetime":$request_time,'
		'"domain":"$host",'
		'"method":"$request_method",'
		'"requesturi":"$request_uri",'
		'"url":"$uri",'
		'"appversion":"$HTTP_APP_VERSION",'
		'"referer":"$http_referer",'
		'"agent":"$http_user_agent",'
		'"status":"$status",'
		'"W-Brand":"$http_[W-Brand]",'
		'"W-Model":"$http_[w-model]",'
		'"W-Token":"$http_[w-token]",'
		'"W-Token":"$http_[W-Token]",'
		 '"devicecode":"$HTTP_HA"}';

	#允许客户端请求的最大的单个文件字节数
	client_max_body_size 20m;
	#指定来自客户端请求头的headerbuffer大小
	client_header_buffer_size 32K;
	#指定客户端请求中较大的消息头的缓存最大数量和大小
	large_client_header_buffers 4 32k;
	#用于开启高效文件传输模式
	sendfile on;
	#数据包不会马上传送出去，等到数据包最大时，一次性的传输出去，从而提高I/O性能,也可以有助于解决网络堵塞，当然会有一点点延迟（使用sendfile函数时，tcp_nopush才起作用，和tcp_nodelay互斥）
	tcp_nopush on;
	#发送小块数据时，立即发送数据，响应快，客户端受益（和tcp_nopush互斥）
	tcp_nodelay off;
	#设置客户端连接保持活动的超时时间,单位是秒,超过则关闭连接
	keepalive_timeout 60;
	#自动创建索引，比如目录浏览下载功能，默认关闭
	autoindex off;
	#设置客户端请求头读取超时时间
	client_header_timeout 10;
	#设置客户端请求主体读取超时时间，默认值是60
	client_body_timeout 30;
	#指定响应客户端的超时时间
	send_timeout 30;

	#设定Nginx服务器和后端FastCGI服务器连接的超时时间
	fastcgi_connect_timeout 60;
	#设定Nginx允许FastCGI服务端返回数据的超时时间
	fastcgi_send_timeout 60;
	#设定Nginx从FastCGI服务端读取响应信息的超时时间
	fastcgi_read_timeout 60;
	#设定用来读取从FastCGI服务端收到的第一部分响应信息的缓冲区大小
	fastcgi_buffer_size 64k;
	#设定用来读取从FastCGI服务端收到的响应信息的缓冲区大小以及缓冲区数量
	fastcgi_buffers 4 64k;
	#设定系统很忙时可以使用的fastcgi_buffers大小，推荐大小为fastcgi_buffers *2
	fastcgi_busy_buffers_size 128k;
	#fastcti临时文件的大小，可设置128-256K
	fastcgi_temp_file_write_size 128k;

	#配置Nginx的HttpGzip模块（是否安装了HttpGzip模块，优化网站）
	#开启GZIP压缩，实时压缩输出数据流
	#gzip on;
	#设置允许压缩的页面最小字节数，默认0，不管页面多大都进行压缩，建议大于1K
	#gzip_min_length 1k;
	#申请4个单位为16K的内存作为压缩结果流缓存
	#gzip_buffers 4 16k;
	#设置识别HTTP协议版本，默认是1.1
	#gzip_http_version 1.1;
	#指定GZIP压缩比，1 压缩比最小，处理速度最快；9 压缩比最大，传输速度快，但处理最慢，也比较消耗cpu资源
	#gzip_comp_level 3;
	#指定压缩的类型，无论是否指定，“text/html”类型总是会被压缩的
	#gzip_types text/plain application/x-javascript text/css application/xml;
	#让前端的缓存服务器缓存经过GZIP压缩的页面
	#gzip_vary on;

	#包含子配置文件，此处是包含conf.d目录下所有的.conf文件
	include conf.d/*.conf;
	include fastcgi.conf;
}
